generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  passwordHash        String               @map("password")
  name                String
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  avatar              String?
  bio                 String?
  birthDate           DateTime?            @map("birth_date")
  passwordChangedAt   DateTime?            @map("password_changed_at")
  accountBooks        AccountBook[]
  budgets             Budget[]
  categories          Category[]
  families            Family[]             @relation("FamilyCreator")
  familyMembers       FamilyMember[]
  passwordResetTokens PasswordResetToken[]
  securityLogs        SecurityLog[]
  sessions            Session[]
  transactions        Transaction[]
  categoryConfigs     UserCategoryConfig[]
  feedback            UserFeedback[]
  llmSettings         UserLLMSetting[]
  settings            UserSetting[]
  verificationCodes   VerificationCode[]

  @@map("users")
}

model Family {
  id           String         @id @default(uuid())
  name         String
  createdBy    String         @map("created_by")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  accountBooks AccountBook[]
  budgets      Budget[]
  categories   Category[]
  creator      User           @relation("FamilyCreator", fields: [createdBy], references: [id])
  members      FamilyMember[]
  invitations  Invitation[]
  transactions Transaction[]

  @@map("families")
}

model FamilyMember {
  id           String        @id @default(uuid())
  familyId     String        @map("family_id")
  userId       String?       @map("user_id")
  name         String
  role         Role          @default(MEMBER)
  isRegistered Boolean       @default(true) @map("is_registered")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  birthDate    DateTime?     @map("birth_date")
  gender       String?       @map("gender")
  isCustodial  Boolean       @default(false) @map("is_custodial")
  budgets      Budget[]
  family       Family        @relation(fields: [familyId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("family_members")
}

model Invitation {
  id             String    @id @default(uuid())
  familyId       String    @map("family_id")
  invitationCode String    @unique @map("invitation_code")
  expiresAt      DateTime  @map("expires_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  isUsed         Boolean   @default(false) @map("is_used")
  usedAt         DateTime? @map("used_at")
  usedByUserId   String?   @map("used_by_user_id")
  usedByUserName String?   @map("used_by_user_name")
  family         Family    @relation(fields: [familyId], references: [id])

  @@map("invitations")
}

model Category {
  id              String               @id @default(uuid())
  name            String
  type            TransactionType
  icon            String?
  userId          String?              @map("user_id")
  familyId        String?              @map("family_id")
  isDefault       Boolean              @default(false) @map("is_default")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  accountBookId   String?              @map("account_book_id")
  budgets         Budget[]
  accountBook     AccountBook?         @relation(fields: [accountBookId], references: [id])
  family          Family?              @relation(fields: [familyId], references: [id])
  user            User?                @relation(fields: [userId], references: [id])
  categoryBudgets CategoryBudget[]
  transactions    Transaction[]
  userConfigs     UserCategoryConfig[]

  @@map("categories")
}

model Transaction {
  id             String          @id @default(uuid())
  amount         Decimal         @db.Decimal(10, 2)
  type           TransactionType
  categoryId     String          @map("category_id")
  description    String?
  date           DateTime
  userId         String          @map("user_id")
  familyId       String?         @map("family_id")
  familyMemberId String?         @map("family_member_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  accountBookId  String?         @map("account_book_id")
  budgetId       String?         @map("budget_id")
  accountBook    AccountBook?    @relation(fields: [accountBookId], references: [id])
  budget         Budget?         @relation(fields: [budgetId], references: [id])
  category       Category        @relation(fields: [categoryId], references: [id])
  family         Family?         @relation(fields: [familyId], references: [id])
  familyMember   FamilyMember?   @relation(fields: [familyMemberId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  feedback       UserFeedback[]

  @@map("transactions")
}

model Budget {
  id                   String           @id @default(uuid())
  amount               Decimal          @db.Decimal(10, 2)
  period               BudgetPeriod
  startDate            DateTime         @map("start_date")
  endDate              DateTime         @map("end_date")
  categoryId           String?          @map("category_id")
  userId               String?          @map("user_id")
  familyId             String?          @map("family_id")
  rollover             Boolean          @default(false)
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  name                 String
  accountBookId        String?          @map("account_book_id")
  isAutoCalculated     Boolean          @default(false) @map("is_auto_calculated")
  enableCategoryBudget Boolean          @default(false) @map("enable_category_budget")
  rolloverAmount       Decimal?         @map("rollover_amount") @db.Decimal(10, 2)
  budgetType           BudgetType       @default(PERSONAL) @map("budget_type")
  amountModified       Boolean          @default(false) @map("amount_modified")
  lastAmountModifiedAt DateTime?        @map("last_amount_modified_at")
  familyMemberId       String?          @map("family_member_id")
  budgetHistories      BudgetHistory[]
  accountBook          AccountBook?     @relation(fields: [accountBookId], references: [id])
  category             Category?        @relation(fields: [categoryId], references: [id])
  family               Family?          @relation(fields: [familyId], references: [id])
  familyMember         FamilyMember?    @relation(fields: [familyMemberId], references: [id])
  user                 User?            @relation(fields: [userId], references: [id])
  categoryBudgets      CategoryBudget[]
  transactions         Transaction[]

  @@map("budgets")
}

model AIModel {
  id        String   @id @default(uuid())
  name      String
  version   String
  type      String
  modelPath String   @map("model_path")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ai_models")
}

model UserFeedback {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  transactionId String?      @map("transaction_id")
  suggestionId  String?      @map("suggestion_id")
  feedbackType  String       @map("feedback_type")
  content       String?
  createdAt     DateTime     @default(now()) @map("created_at")
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@map("user_feedback")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isUsed    Boolean  @default(false) @map("is_used")
  user      User     @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model UserSetting {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  key       String
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key])
  @@map("user_settings")
}

model AccountBook {
  id               String          @id @default(uuid())
  name             String
  description      String?
  userId           String          @map("user_id")
  isDefault        Boolean         @default(false) @map("is_default")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  familyId         String?         @map("family_id")
  type             AccountBookType @default(PERSONAL) @map("type")
  created_by       String?
  userLLMSettingId String?         @map("user_llm_setting_id")
  family           Family?         @relation(fields: [familyId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  userLLMSetting   UserLLMSetting? @relation(fields: [userLLMSettingId], references: [id])
  budgets          Budget[]
  categories       Category[]
  transactions     Transaction[]

  @@map("account_books")
}

model CategoryBudget {
  id         String   @id @default(uuid())
  budgetId   String   @map("budget_id")
  categoryId String   @map("category_id")
  amount     Decimal  @db.Decimal(10, 2)
  spent      Decimal  @default(0) @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  budget     Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([budgetId, categoryId])
  @@map("category_budgets")
}

model UserCategoryConfig {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  categoryId   String   @map("category_id")
  isHidden     Boolean  @default(false) @map("is_hidden")
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("user_category_configs")
}

model Session {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  token      String   @unique
  deviceName String?  @map("device_name")
  deviceType String?  @map("device_type")
  browser    String?
  os         String?
  ip         String?
  location   String?
  isCurrent  Boolean  @default(false) @map("is_current")
  lastActive DateTime @default(now()) @map("last_active")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationCode {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  code      String
  email     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isUsed    Boolean  @default(false) @map("is_used")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model SecurityLog {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  type        String
  description String
  deviceInfo  String   @map("device_info")
  ipAddress   String   @map("ip_address")
  location    String
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("security_logs")
}

model user_account_books {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String
  account_book_id String   @db.Uuid
  can_edit        Boolean  @default(false)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)

  @@unique([user_id, account_book_id])
}

model BudgetHistory {
  id               String       @id @default(uuid())
  budgetId         String       @map("budget_id")
  period           String
  amount           Decimal      @db.Decimal(10, 2)
  type             RolloverType
  description      String?
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at")
  budgetAmount     Decimal?     @map("budget_amount") @db.Decimal(10, 2)
  spentAmount      Decimal?     @map("spent_amount") @db.Decimal(10, 2)
  previousRollover Decimal?     @map("previous_rollover") @db.Decimal(10, 2)
  budget           Budget       @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("budget_histories")
}

model UserLLMSetting {
  id           String        @id @default(uuid())
  userId       String        @map("user_id")
  provider     String        @default("openai")
  model        String        @default("gpt-3.5-turbo")
  apiKey       String?       @map("api_key")
  temperature  Float         @default(0.3)
  maxTokens    Int           @default(1000) @map("max_tokens")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  baseUrl      String?       @map("base_url")
  description  String?
  name         String        @default("默认LLM设置")
  accountBooks AccountBook[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_llm_settings")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  MONTHLY
  YEARLY
}

enum Role {
  ADMIN
  MEMBER
}

enum AccountBookType {
  PERSONAL
  FAMILY
}

enum BudgetType {
  PERSONAL
  GENERAL
}

enum RolloverType {
  SURPLUS
  DEFICIT
}
