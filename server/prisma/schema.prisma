generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  passwordHash         String                 @map("password")
  name                 String
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  avatar               String?
  bio                  String?
  birthDate            DateTime?              @map("birth_date")
  passwordChangedAt    DateTime?              @map("password_changed_at")
  isCustodial          Boolean                @default(false) @map("is_custodial")
  isActive             Boolean                @default(true) @map("is_active")
  dailyLlmTokenLimit   Int?                   @map("daily_llm_token_limit")
  deletionRequestedAt  DateTime?              @map("deletion_requested_at")
  deletionScheduledAt  DateTime?              @map("deletion_scheduled_at")
  accountBooks         AccountBook[]
  budgetHistories      BudgetHistory[]
  budgets              Budget[]
  categories           Category[]
  families             Family[]               @relation("FamilyCreator")
  familyMembers        FamilyMember[]
  passwordResetTokens  PasswordResetToken[]
  securityLogs         SecurityLog[]
  sessions             Session[]
  transactions         Transaction[]
  categoryConfigs      UserCategoryConfig[]
  feedback             UserFeedback[]
  llmSettings          UserLLMSetting[]
  settings             UserSetting[]
  verificationCodes    VerificationCode[]
  wechat_user_bindings wechat_user_bindings[]
  tags                 Tag[]

  @@index([isActive], map: "idx_users_is_active")
  @@map("users")
}

model Family {
  id           String         @id @default(uuid())
  name         String
  createdBy    String         @map("created_by")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  accountBooks AccountBook[]
  budgets      Budget[]
  categories   Category[]
  creator      User           @relation("FamilyCreator", fields: [createdBy], references: [id])
  members      FamilyMember[]
  invitations  Invitation[]
  transactions Transaction[]

  @@map("families")
}

model FamilyMember {
  id           String        @id @default(uuid())
  familyId     String        @map("family_id")
  userId       String?       @map("user_id")
  name         String
  role         Role          @default(MEMBER)
  isRegistered Boolean       @default(true) @map("is_registered")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  birthDate    DateTime?     @map("birth_date")
  gender       String?       @map("gender")
  isCustodial  Boolean       @default(false) @map("is_custodial")
  budgets      Budget[]
  family       Family        @relation(fields: [familyId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("family_members")
}

model Invitation {
  id             String    @id @default(uuid())
  familyId       String    @map("family_id")
  invitationCode String    @unique @map("invitation_code")
  expiresAt      DateTime  @map("expires_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  isUsed         Boolean   @default(false) @map("is_used")
  usedAt         DateTime? @map("used_at")
  usedByUserId   String?   @map("used_by_user_id")
  usedByUserName String?   @map("used_by_user_name")
  family         Family    @relation(fields: [familyId], references: [id])

  @@map("invitations")
}

model Category {
  id              String               @id @default(uuid())
  name            String
  type            TransactionType
  icon            String?
  userId          String?              @map("user_id")
  familyId        String?              @map("family_id")
  isDefault       Boolean              @default(false) @map("is_default")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  accountBookId   String?              @map("account_book_id")
  budgets         Budget[]
  accountBook     AccountBook?         @relation(fields: [accountBookId], references: [id])
  family          Family?              @relation(fields: [familyId], references: [id])
  user            User?                @relation(fields: [userId], references: [id])
  categoryBudgets CategoryBudget[]
  transactions    Transaction[]
  userConfigs     UserCategoryConfig[]

  @@map("categories")
}

model Transaction {
  id             String          @id @default(uuid())
  amount         Decimal         @db.Decimal(10, 2)
  type           TransactionType
  categoryId     String          @map("category_id")
  description    String?
  date           DateTime
  userId         String          @map("user_id")
  familyId       String?         @map("family_id")
  familyMemberId String?         @map("family_member_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  accountBookId  String?         @map("account_book_id")
  budgetId       String?         @map("budget_id")
  metadata       Json?           @map("metadata")
  accountBook    AccountBook?    @relation(fields: [accountBookId], references: [id])
  budget         Budget?         @relation(fields: [budgetId], references: [id])
  category       Category        @relation(fields: [categoryId], references: [id])
  family         Family?         @relation(fields: [familyId], references: [id])
  familyMember   FamilyMember?   @relation(fields: [familyMemberId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  feedback       UserFeedback[]
  transactionTags TransactionTag[]

  @@index([metadata], map: "idx_transactions_metadata_gin", type: Gin)
  @@map("transactions")
}

model Budget {
  id                   String           @id @default(uuid())
  amount               Decimal          @db.Decimal(10, 2)
  period               BudgetPeriod
  startDate            DateTime         @map("start_date")
  endDate              DateTime         @map("end_date")
  categoryId           String?          @map("category_id")
  userId               String?          @map("user_id")
  familyId             String?          @map("family_id")
  rollover             Boolean          @default(false)
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  name                 String
  accountBookId        String?          @map("account_book_id")
  isAutoCalculated     Boolean          @default(false) @map("is_auto_calculated")
  enableCategoryBudget Boolean          @default(false) @map("enable_category_budget")
  rolloverAmount       Decimal?         @map("rollover_amount") @db.Decimal(10, 2)
  budgetType           BudgetType       @default(PERSONAL) @map("budget_type")
  amountModified       Boolean          @default(false) @map("amount_modified")
  lastAmountModifiedAt DateTime?        @map("last_amount_modified_at")
  familyMemberId       String?          @map("family_member_id")
  refreshDay           Int?             @default(1) @map("refresh_day")
  budgetHistories      BudgetHistory[]
  accountBook          AccountBook?     @relation(fields: [accountBookId], references: [id])
  category             Category?        @relation(fields: [categoryId], references: [id])
  family               Family?          @relation(fields: [familyId], references: [id])
  familyMember         FamilyMember?    @relation(fields: [familyMemberId], references: [id])
  user                 User?            @relation(fields: [userId], references: [id])
  categoryBudgets      CategoryBudget[]
  transactions         Transaction[]

  @@map("budgets")
}

model AIModel {
  id        String   @id @default(uuid())
  name      String
  version   String
  type      String
  modelPath String   @map("model_path")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ai_models")
}

model UserFeedback {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  transactionId String?      @map("transaction_id")
  suggestionId  String?      @map("suggestion_id")
  feedbackType  String       @map("feedback_type")
  content       String?
  createdAt     DateTime     @default(now()) @map("created_at")
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@map("user_feedback")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isUsed    Boolean  @default(false) @map("is_used")
  user      User     @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model UserSetting {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  key       String
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key])
  @@map("user_settings")
}

model AccountLLMSetting {
  id            String      @id @default(cuid())
  accountBookId String      @unique @map("account_book_id")
  provider      String
  model         String
  apiKey        String?     @map("api_key")
  temperature   Float       @default(0.3)
  maxTokens     Int         @default(1000) @map("max_tokens")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  accountBook   AccountBook @relation(fields: [accountBookId], references: [id], onDelete: Cascade)

  @@map("account_llm_settings")
}

model AccountBook {
  id                   String                 @id @default(uuid())
  name                 String
  description          String?
  userId               String                 @map("user_id")
  isDefault            Boolean                @default(false) @map("is_default")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  familyId             String?                @map("family_id")
  type                 AccountBookType        @default(PERSONAL) @map("type")
  createdBy            String?                @map("created_by")
  userLLMSettingId     String?                @map("user_llm_setting_id")
  family               Family?                @relation(fields: [familyId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])
  userLLMSetting       UserLLMSetting?        @relation(fields: [userLLMSettingId], references: [id])
  accountLLMSetting    AccountLLMSetting?
  budgetHistories      BudgetHistory[]
  budgets              Budget[]
  categories           Category[]
  transactions         Transaction[]
  tags                 Tag[]

  @@map("account_books")
}

model CategoryBudget {
  id         String   @id @default(uuid())
  budgetId   String   @map("budget_id")
  categoryId String   @map("category_id")
  amount     Decimal  @db.Decimal(10, 2)
  spent      Decimal  @default(0) @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  budget     Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([budgetId, categoryId])
  @@map("category_budgets")
}

model UserCategoryConfig {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  categoryId   String   @map("category_id")
  isHidden     Boolean  @default(false) @map("is_hidden")
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("user_category_configs")
}

model Session {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  token      String   @unique
  deviceName String?  @map("device_name")
  deviceType String?  @map("device_type")
  browser    String?
  os         String?
  ip         String?
  location   String?
  isCurrent  Boolean  @default(false) @map("is_current")
  lastActive DateTime @default(now()) @map("last_active")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationCode {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  code      String
  email     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isUsed    Boolean  @default(false) @map("is_used")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model SecurityLog {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  type        String
  description String
  deviceInfo  String   @map("device_info")
  ipAddress   String   @map("ip_address")
  location    String
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("security_logs")
}

model user_account_books {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String
  account_book_id String   @db.Uuid
  can_edit        Boolean  @default(false)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)

  @@unique([user_id, account_book_id])
}

model BudgetHistory {
  id               String       @id @default(uuid())
  budgetId         String       @map("budget_id")
  period           String
  amount           Decimal      @db.Decimal(10, 2)
  type             RolloverType
  description      String?
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at")
  budgetAmount     Decimal?     @map("budget_amount") @db.Decimal(10, 2)
  spentAmount      Decimal?     @map("spent_amount") @db.Decimal(10, 2)
  previousRollover Decimal?     @map("previous_rollover") @db.Decimal(10, 2)
  userId           String?      @map("user_id")
  accountBookId    String?      @map("account_book_id")
  budgetType       String?      @default("PERSONAL") @map("budget_type")
  accountBook      AccountBook? @relation(fields: [accountBookId], references: [id], onDelete: Cascade)
  budget           Budget       @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  user             User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, accountBookId, budgetType, createdAt(sort: Desc)], map: "idx_budget_histories_user_account")
  @@map("budget_histories")
}

model UserLLMSetting {
  id           String        @id @default(uuid())
  userId       String        @map("user_id")
  provider     String        @default("openai")
  model        String        @default("gpt-3.5-turbo")
  apiKey       String?       @map("api_key")
  temperature  Float         @default(0.3)
  maxTokens    Int           @default(1000) @map("max_tokens")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  baseUrl      String?       @map("base_url")
  description  String?
  name         String        @default("默认LLM设置")
  accountBooks AccountBook[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_llm_settings")
}

model Admin {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username             String         @unique(map: "admins_username_unique") @db.VarChar(50)
  passwordHash         String         @map("password_hash") @db.VarChar(255)
  email                String?        @unique(map: "admins_email_unique") @db.VarChar(100)
  role                 admin_role     @default(ADMIN)
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  lastLoginAt          DateTime?      @map("last_login_at") @db.Timestamptz(6)
  isActive             Boolean        @default(true) @map("is_active")
  createdAnnouncements Announcement[] @relation("AnnouncementCreator")
  updatedAnnouncements Announcement[] @relation("AnnouncementUpdater")

  @@index([isActive], map: "idx_admins_active")
  @@index([email], map: "idx_admins_email")
  @@index([role], map: "idx_admins_role")
  @@index([username], map: "idx_admins_username")
  @@map("admins")
}

model SystemConfig {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String   @unique(map: "system_configs_key_unique") @db.VarChar(100)
  value       String?
  description String?
  category    String   @default("general") @db.VarChar(50)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy   String?  @map("created_by") @db.Uuid
  updatedBy   String?  @map("updated_by") @db.Uuid

  @@index([category], map: "idx_system_configs_category")
  @@index([key], map: "idx_system_configs_key")
  @@map("system_configs")
}

model Announcement {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String                @db.VarChar(200)
  content        String
  priority       announcement_priority @default(NORMAL)
  status         announcement_status   @default(DRAFT)
  publishedAt    DateTime?             @map("published_at") @db.Timestamptz(6)
  expiresAt      DateTime?             @map("expires_at") @db.Timestamptz(6)
  targetUserType String?               @default("all") @map("target_user_type") @db.VarChar(50)
  createdAt      DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdBy      String                @map("created_by") @db.Uuid
  updatedBy      String?               @map("updated_by") @db.Uuid
  readings       AnnouncementRead[]
  creator        Admin                 @relation("AnnouncementCreator", fields: [createdBy], references: [id])
  updater        Admin?                @relation("AnnouncementUpdater", fields: [updatedBy], references: [id])

  @@index([priority], map: "idx_announcements_priority")
  @@index([publishedAt], map: "idx_announcements_published_at")
  @@index([status], map: "idx_announcements_status")
  @@index([targetUserType], map: "idx_announcements_target")
  @@map("announcements")
}

model AnnouncementRead {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  announcementId String       @map("announcement_id") @db.Uuid
  userId         String       @map("user_id")
  readAt         DateTime     @default(now()) @map("read_at") @db.Timestamptz(6)
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  announcement   Announcement @relation(fields: [announcementId], references: [id])

  @@unique([announcementId, userId], map: "idx_announcement_reads_unique")
  @@index([announcementId, readAt(sort: Desc)], map: "idx_announcement_reads_announcement")
  @@index([userId, readAt(sort: Desc)], map: "idx_announcement_reads_user")
  @@map("announcement_reads")
}

model AccessLog {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String?  @map("user_id")
  userName    String?  @map("user_name") @db.VarChar(100)
  path        String   @db.VarChar(500)
  method      String   @db.VarChar(10)
  queryParams String?  @map("query_params")
  userAgent   String?  @map("user_agent")
  ipAddress   String?  @map("ip_address")
  referer     String?
  duration    Int?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([ipAddress, createdAt(sort: Desc)], map: "idx_access_logs_ip")
  @@index([path, createdAt(sort: Desc)], map: "idx_access_logs_path_time")
  @@index([userId, createdAt(sort: Desc)], map: "idx_access_logs_user_time")
  @@map("access_logs")
}

model ApiCallLog {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  endpoint     String   @db.VarChar(200)
  method       String   @db.VarChar(10)
  userId       String?  @map("user_id")
  userName     String?  @map("user_name") @db.VarChar(100)
  statusCode   Int      @map("status_code")
  duration     Int
  requestSize  Int?     @map("request_size")
  responseSize Int?     @map("response_size")
  errorMessage String?  @map("error_message")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([endpoint, createdAt(sort: Desc)], map: "idx_api_call_logs_endpoint_time")
  @@index([statusCode, createdAt(sort: Desc)], map: "idx_api_call_logs_status")
  @@index([userId, createdAt(sort: Desc)], map: "idx_api_call_logs_user_time")
  @@map("api_call_logs")
}

model LlmCallLog {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @map("user_id")
  userName         String   @map("user_name") @db.VarChar(100)
  accountBookId    String?  @map("account_book_id")
  accountBookName  String?  @map("account_book_name") @db.VarChar(200)
  provider         String   @db.VarChar(50)
  model            String   @db.VarChar(100)
  promptTokens     Int      @default(0) @map("prompt_tokens")
  completionTokens Int      @default(0) @map("completion_tokens")
  totalTokens      Int      @default(0) @map("total_tokens")
  userMessage      String   @map("user_message")
  assistantMessage String?  @map("assistant_message")
  systemPrompt     String?  @map("system_prompt")
  isSuccess        Boolean  @map("is_success")
  errorMessage     String?  @map("error_message")
  duration         Int
  cost             Decimal? @db.Decimal(10, 6)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  serviceType      String   @default("official") @map("service_type") @db.VarChar(20)

  @@index([accountBookId, createdAt(sort: Desc)], map: "idx_llm_call_logs_account_book_time")
  @@index([provider, model, createdAt(sort: Desc)], map: "idx_llm_call_logs_provider_model")
  @@index([isSuccess, createdAt(sort: Desc)], map: "idx_llm_call_logs_success")
  @@index([userId, createdAt(sort: Desc)], map: "idx_llm_call_logs_user_time")
  @@index([serviceType, createdAt(sort: Desc)], map: "idx_llm_call_logs_service_type")
  @@index([userId, serviceType, createdAt(sort: Desc)], map: "idx_llm_call_logs_user_service_type")
  @@map("llm_call_logs")
}

model StatisticsAggregation {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metricType String   @map("metric_type") @db.VarChar(50)
  date       DateTime @db.Date
  value      Decimal  @db.Decimal(20, 6)
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([metricType, date], map: "idx_statistics_metric_date")
  @@index([date(sort: Desc)], map: "idx_statistics_date")
  @@map("statistics_aggregations")
}

model SchemaVersion {
  id            Int      @id @default(autoincrement())
  version       String   @db.VarChar(20)
  description   String?
  appliedAt     DateTime @default(now()) @map("applied_at") @db.Timestamptz(6)
  migrationFile String?  @unique(map: "schema_versions_migration_file_unique") @map("migration_file") @db.VarChar(255)

  @@map("schema_versions")
}

model wechat_message_logs {
  id                   String               @id
  openid               String
  message_type         String
  content              String?
  response             String?
  status               String               @default("pending")
  error_message        String?
  processing_time      Int?
  created_at           DateTime             @default(now())
  wechat_user_bindings wechat_user_bindings @relation(fields: [openid], references: [openid], onDelete: Cascade, onUpdate: NoAction, map: "fk_wechat_message_logs_binding")

  @@index([message_type], map: "idx_wechat_message_logs_message_type")
  @@index([openid, created_at(sort: Desc)], map: "idx_wechat_message_logs_openid_time")
  @@index([status, created_at(sort: Desc)], map: "idx_wechat_message_logs_status_time")
}

model wechat_user_bindings {
  id                      String                @id
  openid                  String                @unique
  user_id                 String
  default_account_book_id String?
  zhiwei_token            String?
  zhiwei_refresh_token    String?
  token_expires_at        DateTime?
  is_active               Boolean               @default(true)
  created_at              DateTime              @default(now())
  updated_at              DateTime
  wechat_message_logs     wechat_message_logs[]
  users                   User                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_wechat_user_bindings_user")

  @@index([is_active], map: "idx_wechat_user_bindings_is_active")
  @@index([openid], map: "idx_wechat_user_bindings_openid")
  @@index([user_id], map: "idx_wechat_user_bindings_user_id")
}

model user_deletion_logs {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  email            String    @map("email")
  name             String?   @map("name")
  requestedAt      DateTime  @map("requested_at") @db.Timestamptz(6)
  scheduledAt      DateTime  @map("scheduled_at") @db.Timestamptz(6)
  deletedAt        DateTime? @map("deleted_at") @db.Timestamptz(6)
  deletionReason   String?   @map("deletion_reason")
  adminUserId      String?   @map("admin_user_id")
  status           String    @default("pending") @map("status")
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([userId], map: "idx_user_deletion_logs_user_id")
  @@index([status], map: "idx_user_deletion_logs_status")
  @@index([scheduledAt], map: "idx_user_deletion_logs_scheduled_at")
  @@index([createdAt], map: "idx_user_deletion_logs_created_at")
  @@map("user_deletion_logs")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  MONTHLY
  YEARLY
}

enum Role {
  ADMIN
  MEMBER
}

enum AccountBookType {
  PERSONAL
  FAMILY
}

enum BudgetType {
  PERSONAL
  GENERAL
}

enum RolloverType {
  SURPLUS
  DEFICIT
}

enum admin_role {
  SUPER_ADMIN
  ADMIN
}

enum announcement_priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum announcement_status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Tag {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(50)
  color          String           @default("#3B82F6") @db.VarChar(7)
  description    String?
  accountBookId  String           @map("account_book_id")
  createdBy      String           @map("created_by")
  isActive       Boolean          @default(true) @map("is_active")
  usageCount     Int              @default(0) @map("usage_count")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  accountBook    AccountBook      @relation(fields: [accountBookId], references: [id], onDelete: Cascade)
  creator        User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  transactionTags TransactionTag[]

  @@unique([name, accountBookId], map: "tags_name_account_book_unique")
  @@index([accountBookId], map: "idx_tags_account_book_id")
  @@index([name], map: "idx_tags_name")
  @@index([createdBy], map: "idx_tags_created_by")
  @@index([usageCount(sort: Desc)], map: "idx_tags_usage_count")
  @@index([createdAt(sort: Desc)], map: "idx_tags_created_at")
  @@index([accountBookId, isActive], map: "idx_tags_account_book_active")
  @@map("tags")
}

model TransactionTag {
  id            String      @id @default(uuid())
  transactionId String      @map("transaction_id")
  tagId         String      @map("tag_id") @db.Uuid
  createdAt     DateTime    @default(now()) @map("created_at")
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([transactionId, tagId], map: "transaction_tags_unique")
  @@index([transactionId], map: "idx_transaction_tags_transaction_id")
  @@index([tagId], map: "idx_transaction_tags_tag_id")
  @@index([createdAt(sort: Desc)], map: "idx_transaction_tags_created_at")
  @@index([tagId, transactionId], map: "idx_transaction_tags_tag_transaction")
  @@map("transaction_tags")
}
