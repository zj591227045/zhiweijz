generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  passwordHash        String
  name                String
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  budgets             Budget[]
  categories          Category[]
  families            Family[]             @relation("FamilyCreator")
  familyMembers       FamilyMember[]
  passwordResetTokens PasswordResetToken[]
  transactions        Transaction[]
  feedback            UserFeedback[]
  settings            UserSetting[]
  accountBooks        AccountBook[]

  @@map("users")
}

model Family {
  id           String         @id @default(uuid())
  name         String
  createdBy    String         @map("created_by")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  budgets      Budget[]
  categories   Category[]
  creator      User           @relation("FamilyCreator", fields: [createdBy], references: [id])
  members      FamilyMember[]
  invitations  Invitation[]
  transactions Transaction[]

  @@map("families")
}

model FamilyMember {
  id           String        @id @default(uuid())
  familyId     String        @map("family_id")
  userId       String?       @map("user_id")
  name         String
  role         Role          @default(MEMBER)
  isRegistered Boolean       @default(true) @map("is_registered")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  family       Family        @relation(fields: [familyId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("family_members")
}

model Invitation {
  id             String   @id @default(uuid())
  familyId       String   @map("family_id")
  invitationCode String   @unique @map("invitation_code")
  expiresAt      DateTime @map("expires_at")
  createdAt      DateTime @default(now()) @map("created_at")
  family         Family   @relation(fields: [familyId], references: [id])

  @@map("invitations")
}

model Category {
  id            String          @id @default(uuid())
  name          String
  type          TransactionType
  icon          String?
  userId        String?         @map("user_id")
  familyId      String?         @map("family_id")
  accountBookId String?         @map("account_book_id")
  isDefault     Boolean         @default(false) @map("is_default")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  budgets       Budget[]
  family        Family?         @relation(fields: [familyId], references: [id])
  user          User?           @relation(fields: [userId], references: [id])
  accountBook   AccountBook?    @relation(fields: [accountBookId], references: [id])
  transactions  Transaction[]

  @@map("categories")
}

model Transaction {
  id             String          @id @default(uuid())
  amount         Decimal         @db.Decimal(10, 2)
  type           TransactionType
  categoryId     String          @map("category_id")
  description    String?
  date           DateTime
  userId         String          @map("user_id")
  familyId       String?         @map("family_id")
  familyMemberId String?         @map("family_member_id")
  accountBookId  String?         @map("account_book_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  category       Category        @relation(fields: [categoryId], references: [id])
  family         Family?         @relation(fields: [familyId], references: [id])
  familyMember   FamilyMember?   @relation(fields: [familyMemberId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  accountBook    AccountBook?    @relation(fields: [accountBookId], references: [id])
  feedback       UserFeedback[]

  @@map("transactions")
}

model Budget {
  id            String       @id @default(uuid())
  amount        Decimal      @db.Decimal(10, 2)
  period        BudgetPeriod
  startDate     DateTime     @map("start_date")
  endDate       DateTime     @map("end_date")
  categoryId    String?      @map("category_id")
  userId        String?      @map("user_id")
  familyId      String?      @map("family_id")
  accountBookId String?      @map("account_book_id")
  rollover      Boolean      @default(false)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  name          String
  category      Category?    @relation(fields: [categoryId], references: [id])
  family        Family?      @relation(fields: [familyId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])
  accountBook   AccountBook? @relation(fields: [accountBookId], references: [id])

  @@map("budgets")
}

model AIModel {
  id        String   @id @default(uuid())
  name      String
  version   String
  type      String
  modelPath String   @map("model_path")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ai_models")
}

model UserFeedback {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  transactionId String?      @map("transaction_id")
  suggestionId  String?      @map("suggestion_id")
  feedbackType  String       @map("feedback_type")
  content       String?
  createdAt     DateTime     @default(now()) @map("created_at")
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@map("user_feedback")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  isUsed    Boolean  @default(false) @map("is_used")
  user      User     @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model UserSetting {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  key       String
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key])
  @@map("user_settings")
}

model AccountBook {
  id          String    @id @default(uuid())
  name        String
  description String?
  userId      String    @map("user_id")
  isDefault   Boolean   @default(false) @map("is_default")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // 关系
  user         User               @relation(fields: [userId], references: [id])
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
  llmSettings  AccountLLMSetting[]

  @@map("account_books")
}

model AccountLLMSetting {
  id            String    @id @default(uuid())
  accountBookId String    @map("account_book_id")
  provider      String    @default("openai")
  model         String    @default("gpt-3.5-turbo")
  apiKey        String?   @map("api_key")
  temperature   Float     @default(0.3)
  maxTokens     Int       @default(1000) @map("max_tokens")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // 关系
  accountBook   AccountBook @relation(fields: [accountBookId], references: [id])

  @@map("account_llm_settings")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  MONTHLY
  YEARLY
}

enum Role {
  ADMIN
  MEMBER
}
