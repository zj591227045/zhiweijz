version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:${POSTGRES_IMAGE_VERSION}
    container_name: ${PROJECT_NAME}-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:5432"
    networks:
      - zhiweijz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 后端服务
  backend:
    image: zj591227045/zhiweijz-backend:${BACKEND_IMAGE_VERSION}
    container_name: ${PROJECT_NAME}-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      DOCKER_ENV: ${DOCKER_ENV}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${BACKEND_PORT}
      # 微信公众号配置
      WECHAT_APP_ID: ${WECHAT_APP_ID}
      WECHAT_APP_SECRET: ${WECHAT_APP_SECRET}
      WECHAT_TOKEN: ${WECHAT_TOKEN}
      WECHAT_ENCODING_AES_KEY: ${WECHAT_ENCODING_AES_KEY}
      WECHAT_ENV: ${WECHAT_ENV}
      WECHAT_DEV_APP_ID: ${WECHAT_DEV_APP_ID}
      WECHAT_DEV_APP_SECRET: ${WECHAT_DEV_APP_SECRET}
      WECHAT_DEV_TOKEN: ${WECHAT_DEV_TOKEN}
      # S3存储配置
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION: ${S3_REGION}
      S3_BUCKET_AVATARS: ${S3_BUCKET_AVATARS}
      S3_BUCKET_ATTACHMENTS: ${S3_BUCKET_ATTACHMENTS}
      S3_BUCKET_TEMP: ${S3_BUCKET_TEMP}
      S3_BUCKET_SYSTEM: ${S3_BUCKET_SYSTEM}
      # 文件存储配置
      FILE_STORAGE_TYPE: ${FILE_STORAGE_TYPE}
      FILE_STORAGE_BASE_URL: ${FILE_STORAGE_BASE_URL}
      FILE_MAX_SIZE: ${FILE_MAX_SIZE}
      FILE_ALLOWED_TYPES: ${FILE_ALLOWED_TYPES}
      # 会员系统配置
      ENABLE_MEMBERSHIP_SYSTEM: ${ENABLE_MEMBERSHIP_SYSTEM}
      ENABLE_ACCOUNTING_POINTS_SYSTEM: ${ENABLE_ACCOUNTING_POINTS_SYSTEM}
      MEMBERSHIP_MONTHLY_POINTS: ${MEMBERSHIP_MONTHLY_POINTS}
      DEFAULT_MEMBER_TYPE: ${DEFAULT_MEMBER_TYPE}
      # 邮件服务配置
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      # AI服务配置
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - zhiweijz-network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:${BACKEND_PORT}/api/health || curl -f http://localhost:${BACKEND_PORT}/"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 40s

  # 前端服务
  frontend:
    image: zj591227045/zhiweijz-frontend:${FRONTEND_IMAGE_VERSION}
    container_name: ${PROJECT_NAME}-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      DOCKER_ENV: ${DOCKER_ENV}
      IS_MOBILE_BUILD: "false"
      PORT: ${FRONTEND_PORT}
    networks:
      - zhiweijz-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -s -o /dev/null -w '%{http_code}' http://localhost:${FRONTEND_PORT}/ | grep -E '^[23]'"]
      interval: 25s
      timeout: 10s
      retries: 4
      start_period: 60s

  # MinIO 对象存储服务
  minio:
    image: minio/minio:${MINIO_IMAGE_VERSION}
    container_name: ${PROJECT_NAME}-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    networks:
      - zhiweijz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # Nginx 反向代理
  nginx:
    image: zj591227045/zhiweijz-nginx:${NGINX_IMAGE_VERSION}
    container_name: ${PROJECT_NAME}-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    networks:
      - zhiweijz-network
    depends_on:
      - frontend
      - backend
      - minio
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost/health && curl -k -f https://localhost/health"]
      interval: 20s
      timeout: 15s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  zhiweijz-network:
    driver: bridge
    name: ${PROJECT_NAME}-network