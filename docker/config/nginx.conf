# 只为记账 - Nginx 配置文件
# 优化的生产环境配置，支持前端和API代理，包含HTTPS支持

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# 事件配置
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # 基础配置
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 上游服务器配置
    upstream backend {
        server ${PROJECT_NAME}-backend:${BACKEND_PORT};
        keepalive 32;
    }

    upstream frontend {
        server ${PROJECT_NAME}-frontend:${FRONTEND_PORT};
        keepalive 32;
    }

    # 定义变量来处理端口问题
    map $http_host $forwarded_host {
        default $http_host;
        ~^([^:]+)$ $1:$server_port;
    }

    # 设置端口重定向变量 - 确保非标准端口包含在重定向中
    map $server_port $redirect_port {
        default :$server_port;
        80 "";
        443 "";
    }

    # 创建完整的主机头，确保包含端口
    map $http_host $full_host {
        default $http_host;
        ~^([^:]+)$ $1:$server_port;
    }

    # 限制请求速率 - 放宽API限制以支持仪表盘并发请求
    limit_req_zone $binary_remote_addr zone=api:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

    # 全局设置：确保重定向包含端口
    port_in_redirect off;

    # HTTP服务器配置 - 提供完整HTTP服务
    server {
        listen 80;
        server_name _;

        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 处理大写API路径重定向问题 - 直接重定向到小写api路径
        location = /API {
            return 301 $scheme://$full_host/api/;
        }

        # 处理其他大写API路径
        location ~ ^/API/(.*)$ {
            return 301 $scheme://$full_host/api/$1;
        }

        # 登录API特殊限制 - 必须在通用API规则之前
        location /api/auth/login {
            limit_req zone=login burst=5 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $full_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $full_host;
            proxy_set_header X-Forwarded-Port $server_port;

            # 强制修复重定向URL中的端口问题
            proxy_redirect ~^http://([^/]+)/(.*)$ http://$full_host/$2;
            proxy_redirect ~^https://([^/]+)/(.*)$ https://$full_host/$2;
            proxy_redirect / http://$full_host/;
        }

        # API请求代理到后端
        location /api/ {
            limit_req zone=api burst=100 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $full_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $full_host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;

            # 强制修复重定向URL中的端口问题
            proxy_redirect ~^http://([^/]+)/(.*)$ http://$full_host/$2;
            proxy_redirect ~^https://([^/]+)/(.*)$ https://$full_host/$2;
            proxy_redirect / http://$full_host/;

            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;

            # 修复重定向URL中的端口问题
            proxy_redirect http://frontend/ http://$http_host/;
            proxy_redirect https://frontend/ https://$http_host/;

            # 缓存设置
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }

        # Next.js 静态资源
        location /_next/static/ {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;

            # 修复重定向URL中的端口问题
            proxy_redirect http://frontend/ http://$http_host/;
            proxy_redirect https://frontend/ https://$http_host/;

            # 长期缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # 前端应用代理
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;

            # 修复重定向URL中的端口问题
            proxy_redirect http://frontend/ http://$http_host/;
            proxy_redirect https://frontend/ https://$http_host/;

            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 禁用缓存（对于HTML页面）
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS服务器配置 - 支持多端口
    server {
        listen 443 ssl;
        listen 4343 ssl;  # 添加对4343端口的支持
        http2 on;  # 启用HTTP/2支持
        server_name _;

        # SSL证书配置
        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

        # SSL配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # 注释掉HSTS头以允许HTTP访问 - 开发环境使用
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 处理大写API路径重定向问题 - 直接重定向到小写api路径
        location = /API {
            return 301 $scheme://$full_host/api/;
        }

        # 处理其他大写API路径
        location ~ ^/API/(.*)$ {
            return 301 $scheme://$full_host/api/$1;
        }

        # 登录API特殊限制 - 必须在通用API规则之前
        location /api/auth/login {
            limit_req zone=login burst=5 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;

            # 修复重定向URL中的端口问题
            proxy_redirect http://backend/ http://$http_host/;
            proxy_redirect https://backend/ https://$http_host/;
        }

        # API请求代理到后端
        location /api/ {
            limit_req zone=api burst=100 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;

            # 修复重定向URL中的端口问题
            proxy_redirect http://backend/ http://$http_host/;
            proxy_redirect https://backend/ https://$http_host/;

            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;

            # 修复重定向URL中的端口问题
            proxy_redirect http://frontend/ http://$http_host/;
            proxy_redirect https://frontend/ https://$http_host/;

            # 缓存设置
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }

        # Next.js 静态资源
        location /_next/static/ {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;

            # 修复重定向URL中的端口问题
            proxy_redirect http://frontend/ http://$http_host/;
            proxy_redirect https://frontend/ https://$http_host/;

            # 长期缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # 前端应用代理
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;

            # 修复重定向URL中的端口问题
            proxy_redirect http://frontend/ http://$http_host/;
            proxy_redirect https://frontend/ https://$http_host/;

            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # 禁用缓存（对于HTML页面）
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
