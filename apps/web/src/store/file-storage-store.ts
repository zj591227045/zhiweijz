import React from 'react';
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { userService } from '@/lib/api/user-service';

/**
 * Êñá‰ª∂Â≠òÂÇ®Áä∂ÊÄÅÊé•Âè£
 */
export interface FileStorageStatus {
  enabled: boolean;
  configured: boolean;
  healthy: boolean;
  message: string;
}

/**
 * Êñá‰ª∂Â≠òÂÇ®StoreÁä∂ÊÄÅÊé•Âè£
 */
interface FileStorageState {
  // Â≠òÂÇ®Áä∂ÊÄÅ
  status: FileStorageStatus | null;
  isLoading: boolean;
  error: string | null;
  lastChecked: number | null;

  // ÁºìÂ≠òÊéßÂà∂
  cacheTimeout: number; // ÁºìÂ≠òË∂ÖÊó∂Êó∂Èó¥ÔºàÊØ´ÁßíÔºâ

  // Actions
  fetchStorageStatus: () => Promise<void>;
  clearError: () => void;
  isStorageAvailable: () => boolean;
  shouldRefreshStatus: () => boolean;
}

/**
 * Êñá‰ª∂Â≠òÂÇ®Áä∂ÊÄÅStore
 */
export const useFileStorageStore = create<FileStorageState>()(
  persist(
    (set, get) => ({
      // ÂàùÂßãÁä∂ÊÄÅ
      status: null,
      isLoading: false,
      error: null,
      lastChecked: null,
      cacheTimeout: 5 * 60 * 1000, // 5ÂàÜÈíüÁºìÂ≠ò

      // Ëé∑ÂèñÂ≠òÂÇ®Áä∂ÊÄÅÔºàÂÆûÊó∂Ëé∑ÂèñÔºå‰∏ç‰ΩøÁî®ÁºìÂ≠òÔºâ
      fetchStorageStatus: async () => {
        set({ isLoading: true, error: null });

        try {
          console.log('üóÑÔ∏è ÂÆûÊó∂Ëé∑ÂèñÊñá‰ª∂Â≠òÂÇ®Áä∂ÊÄÅ...');

          // ‰ΩøÁî®Áî®Êà∑ÊúçÂä°Ëé∑ÂèñÂ≠òÂÇ®Áä∂ÊÄÅ
          const status = await userService.getFileStorageStatus();
          console.log('üóÑÔ∏è Êñá‰ª∂Â≠òÂÇ®Áä∂ÊÄÅ:', status);

          set({
            status,
            isLoading: false,
            error: null,
            lastChecked: Date.now(),
          });
        } catch (error) {
          console.error('üóÑÔ∏è Ëé∑ÂèñÊñá‰ª∂Â≠òÂÇ®Áä∂ÊÄÅÂ§±Ë¥•:', error);
          const errorMessage = error instanceof Error ? error.message : 'Ëé∑ÂèñÂ≠òÂÇ®Áä∂ÊÄÅÂ§±Ë¥•';

          set({
            status: {
              enabled: false,
              configured: false,
              healthy: false,
              message: errorMessage,
            },
            isLoading: false,
            error: errorMessage,
            lastChecked: Date.now(),
          });
        }
      },

      // Ê∏ÖÈô§ÈîôËØØ
      clearError: () => set({ error: null }),

      // Ê£ÄÊü•Â≠òÂÇ®ÊòØÂê¶ÂèØÁî®
      isStorageAvailable: () => {
        const { status } = get();
        return status?.enabled && status?.configured && status?.healthy;
      },

      // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÂà∑Êñ∞Áä∂ÊÄÅ
      shouldRefreshStatus: () => {
        const { lastChecked, cacheTimeout } = get();
        if (!lastChecked) return true;
        return Date.now() - lastChecked > cacheTimeout;
      },
    }),
    {
      name: 'file-storage-store',
      // Âè™ÊåÅ‰πÖÂåñÁä∂ÊÄÅÊï∞ÊçÆÔºå‰∏çÊåÅ‰πÖÂåñÂáΩÊï∞
      partialize: (state) => ({
        status: state.status,
        lastChecked: state.lastChecked,
        cacheTimeout: state.cacheTimeout,
      }),
    },
  ),
);

/**
 * Êñá‰ª∂Â≠òÂÇ®Áä∂ÊÄÅHook
 * Êèê‰æõ‰æøÊç∑ÁöÑÁä∂ÊÄÅËÆøÈóÆÂíåËá™Âä®Âà∑Êñ∞ÂäüËÉΩ
 */
export const useFileStorageStatus = () => {
  const {
    status,
    isLoading,
    error,
    fetchStorageStatus,
    clearError,
    isStorageAvailable,
    shouldRefreshStatus,
  } = useFileStorageStore();

  // Ëá™Âä®Ëé∑ÂèñÁä∂ÊÄÅÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
  React.useEffect(() => {
    if (shouldRefreshStatus()) {
      fetchStorageStatus();
    }
  }, [fetchStorageStatus, shouldRefreshStatus]);

  return {
    status,
    isLoading,
    error,
    isAvailable: isStorageAvailable(),
    refresh: fetchStorageStatus,
    clearError,
  };
};
